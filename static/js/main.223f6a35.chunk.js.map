{"version":3,"sources":["components/TodoContext.js","components/TodoCreate.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoTemplate.js","App.js","index.js"],"names":["initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","useReducer","dispatch","nextId","useRef","length","Provider","value","useTodoState","context","useContext","useTodoDispatch","CircleButton","styled","button","props","open","css","InsertFormPositioner","div","InsertForm","form","Input","input","TodoCreate","useState","setOpen","useTodoNextId","setValue","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","onClick","React","memo","TodoHeadBlock","TodoHead","undoneTasks","dateString","Date","toLocaleDateString","year","month","day","dayName","weekday","className","CheckCircle","Text","Remove","TodoItemBlock","TodoItem","TodoListBlock","TodoList","todos","TodoTemplateBlock","TodoTemplate","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.223f6a35.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id: 1,\r\n        text: '프로젝트 생성하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: '컴포넌트 스타일링하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 3,\r\n        text: 'Context 만들기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: '기능 구현하기',\r\n        done: false\r\n    }\r\n];\r\n/*\r\n    CREATE\r\n    TOGGLE\r\n    REMOVE\r\n */\r\nfunction todoReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(\r\n                todo => todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n            )\r\n        case 'REMOVE':\r\n            return state.filter(\r\n                todo => todo.id !== action.id\r\n            )\r\n        default:\r\n            throw new Error(`Unhandled action type: ${action.type}`)\r\n    }\r\n}\r\n\r\n// context api 설정\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\n// context api 컴포넌트 설정\r\nexport function TodoProvider({ children }) {\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos)\r\n    const nextId = useRef(initialTodos.length + 1)\r\n\r\n    return (\r\n        /* children 아래 value(state, dispatch) 사용이 가능해짐 = contextAPI */\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n}\r\n\r\n// state context api\r\n/* 호출 방법\r\n        import {useTodoState} from '.............../TodoContext'\r\n        const state = useTodoState();\r\n    */\r\nexport function useTodoState() {\r\n    const context = useContext(TodoStateContext)\r\n\r\n    if (!context) {\r\n        throw new Error('Cannot find TodoStateContext.Provider')\r\n    }\r\n    return context\r\n\r\n}\r\n\r\n// dispatch context api\r\nexport function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext)\r\n\r\n    if (!context) {\r\n        throw new Error('Cannot find TodoDispatchContext.Provider')\r\n    }\r\n    return context\r\n}\r\n\r\nexport function useTodoNextId() {\r\n    const context = useContext(TodoNextIdContext)\r\n\r\n    if (!context) {\r\n        throw new Error('Cannot find TodoNextIdContext.Provider')\r\n    }\r\n    return context\r\n}","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md'\r\nimport { useTodoDispatch, useTodoNextId } from './TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    //https://firerope.tistory.com/4\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    transform: translate(-50%, 50%);\r\n    /* margin-left: -40px ;\r\n    margin-bottom: -40px ; */\r\n    /* translateX:-50%;\r\n    translateY:-50%; */\r\n\r\n    font-size: 60px;\r\n    color: #fff;\r\n    border-radius: 50%;\r\n\r\n    border: none;\r\n    outline: none;\r\n\r\n    transition: 0.125s all ease-in;\r\n    ${props => props.open &&\r\n        css`\r\n        background: #ff6b6b;\r\n        &:hover{\r\n            background: #ff8787;\r\n        }\r\n        &:active {\r\n            background: #fa5252;\r\n        }\r\n        transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    background: #f8f9fa;\r\n    padding: 32px;\r\n    padding-bottom: 72px;\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    // 패딩을 주고 사이즈를 증가시킬때 border-box 고려 필요\r\n    box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false)\r\n    const onToggle = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const dispatch = useTodoDispatch()\r\n    const nextId = useTodoNextId()\r\n\r\n    //Input compontent 이벤트 동작 구현\r\n    const [value, setValue] = useState('')\r\n    const onChange = (e) => setValue(e.target.value)\r\n\r\n    // InsertForm (todolist) 입력 적용부\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        dispatch({\r\n            type: 'CREATE',\r\n            todo: {\r\n                id: nextId.current,\r\n                text: value,\r\n                done: false\r\n            }\r\n        })\r\n        setValue('')\r\n        setOpen(false)\r\n        nextId.current += 1\r\n    }\r\n\r\n\r\n    return (\r\n        // TodoCreate 부모\r\n        <>\r\n            {\r\n                open && (\r\n                    <InsertFormPositioner>\r\n                        <InsertForm onSubmit={onSubmit}>\r\n                            <Input\r\n                                placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\r\n                                autoFocus\r\n                                onChange={onChange}\r\n                                value={value}\r\n                            />\r\n                        </InsertForm>\r\n                    </InsertFormPositioner>\r\n                )\r\n            }\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoCreate);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from './TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding: 48px 32px 24px 32px;\r\n    border-bottom: 1px solid #e9ecef;\r\n    h1 {\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: 700;\r\n    }\r\n`;\r\nfunction TodoHead() {\r\n    const todos = useTodoState();\r\n    const undoneTasks = todos.filter(todo => !todo.done)\r\n    const dateString = new Date().toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    });\r\n    const dayName = new Date().toLocaleDateString('ko-KR', {\r\n        weekday: 'long'\r\n    })\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">{dayName}</div>\r\n            <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    );\r\n}\r\n\r\nexport default TodoHead;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md'\r\nimport { useTodoDispatch } from './TodoContext';\r\n\r\nconst CheckCircle = styled.div`\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props =>\r\n        props.done &&\r\n        css`\r\n        border: 1px solid #38d9a9;\r\n        color: #38d9a9;\r\n    `}\r\n`;\r\n\r\n// 원 옆에 텍스트\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props =>\r\n        props.done &&\r\n        css`\r\n        color: #ced4da;\r\n    `}\r\n`;\r\n\r\n// 휴지통\r\nconst Remove = styled.div`\r\n    // 처음에는 0 TodoItemBlock 커서 선택시 보이게\r\n    opacity: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n`;\r\n\r\n// listBox 전체 블록\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        ${Remove} {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n//https://react-icons.github.io/react-icons/icons?name=md\r\nfunction TodoItem({ id, done, text }) {\r\n    const dispatch = useTodoDispatch()\r\n    const onToggle = () => dispatch({\r\n        type: 'TOGGLE',\r\n        id\r\n    })\r\n    const onRemove = () => dispatch({\r\n        type: 'REMOVE',\r\n        id\r\n    })\r\n\r\n    return (\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={onToggle}>\r\n                {done && <MdDone />}\r\n            </CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove>\r\n                <MdDelete onClick={onRemove} />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from './TodoContext';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoListBlock = styled.div`\r\n    /* flex: 1; */\r\n    flex-grow: 1;\r\n    flex-shrink: 1;\r\n    flex-basis: auto;\r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto; // 항목이 많아지면 스크롤바\r\n`;\r\n\r\nfunction TodoList() {\r\n    const todos = useTodoState()\r\n    return (\r\n        <TodoListBlock>\r\n            {\r\n                todos.map((todo) => {\r\n                    return (\r\n                        <TodoItem key={todo.id} id={todo.id} text={todo.text} done={todo.done} />\r\n                    )\r\n                })\r\n            }\r\n        </TodoListBlock>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n  \r\n  position: relative;\r\n  background: #fff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px rgba(0,0,0,.4);\r\n\r\n  margin: 0 auto;\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { TodoProvider } from './components/TodoContext';\nimport TodoCreate from './components/TodoCreate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoTemplate from './components/TodoTemplate';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}